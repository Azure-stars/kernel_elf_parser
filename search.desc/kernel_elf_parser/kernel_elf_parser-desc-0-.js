searchState.loadedDescShard("kernel_elf_parser", 0, "kernel-elf-parser\nRepresents an entry in the auxiliary vector.\nRepresents the type of an auxiliary vector entry.\nBase address of interpreter\nString identifying real platform, may differ from …\nFrequency at which times() increments\nData cache block size\nEffective GID\nELF Program Header applied to the kernel\nA wrapper for the ELF file data with some useful methods.\nEntry point of program\nEffective UID\nFile descriptor of program\nFilename of program\nFlags\nFloating point unit control word\nReal GID\nArch dependent hints at CPU capabilities\nExtension of AT_HWCAP\nInstruction cache block size\nEntry should be ignored\nEntry should be ignored on PowerPC\nGeometry of level 1 data cache\nShape of level 1 data cache\nSize of level 1 data cache\nGeometry of level 1 instruction cache\nShape of level 1 instruction cache\nSize of level 1 instruction cache\nGeometry of level 2 cache\nShape of level 2 cache\nSize of level 2 cache\nGeometry of level 3 cache\nShape of level 3 cache\nSize of level 3 cache\nMinimal stack size for signal delivery\nProgram is not ELF\nEnd of vector\nSystem page size\nProgram headers for program\nSize of program header entry\nNumber of program headers\nString identifying CPU for optimizations\nAddress of 16 random bytes\nSecure mode boolean\nAddress of the VDSO\nAddress of the ELF header of the VDSO\nUnified cache block size\nReal UID\nGenerate initial stack frame for user stack\nPart of auxiliary vectors from the ELF file.\nThe base address of the ELF file loaded into the memory.\nThe ref of the ELF file data.\nThe entry point of the ELF file.\nFile size of the segment\n<code>MappingFlags</code> of the segment which is used to set the page …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet self::AuxvType of the auxv entry\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory size of the segment\nCreate a new <code>ELFInfo</code> instance.\nCreate a new auxv entry\nThe start offset of the segment in the ELF file\nRead all <code>self::ELFPH</code> with <code>LOAD</code> type of the elf file.\nThe offset of the program header table in the ELF file.\nThe size of the program header table entry in the ELF file.\nThe number of program headers in the ELF file.\nThe destination virtual address of the segment in the …\nGet the value of the auxv entry\nGet a mutable reference to the value of the auxv entry")